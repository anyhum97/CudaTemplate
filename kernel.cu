#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>

#include "Reflection.cu"

////////////////////////////////////////////////////////////////////////

Reflection<float> Buffer; // [3][Width][Height];

////////////////////////////////////////////////////////////////////////

void __global__ CudaSample(float* buf)
{
    /// <<<1, 128>>>

    const unsigned int block = blockIdx.x;
    const unsigned int thread = threadIdx.x;

    if(block > 0 || thread > 128)
    {
        return;
    }

    buf[thread] += thread;
}

////////////////////////////////////////////////////////////////////////

float*** CudaBuffer;

cudaEvent_t start;
cudaEvent_t stop;

////////////////////////////////////////////////////////////////////////

void CudaMalloc()
{
    cudaSetDevice(0);
}

void CudaFree()
{

}

////////////////////////////////////////////////////////////////////////

void Test()
{
    cudaEventCreate(&start);
	cudaEventCreate(&stop);

	cudaEventRecord(start, 0);

    ////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////

    cudaEventRecord(stop, 0);
	cudaEventSynchronize(stop);

	float time = 0;

	cudaEventElapsedTime(&time, start, stop);

	cudaEventDestroy(start);
	cudaEventDestroy(stop);

    ////////////////////////////////////////////////////////////////////////

    cout << time << "ms [OK]\n\n";

    ////////////////////////////////////////////////////////////////////////
}

void main()
{
    CudaMalloc();

    ////////////////////////////////////////////////////////////////////////

    const unsigned int Width = 1024;
    const unsigned int Height = 1024;

    

    ////////////////////////////////////////////////////////////////////////

    CudaFree();
}